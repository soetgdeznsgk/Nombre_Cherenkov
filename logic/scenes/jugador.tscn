[gd_scene load_steps=6 format=3 uid="uid://bnl1k0w4e64he"]

[ext_resource type="Script" path="res://logic/scenes/camarascript.gd" id="1_jh4ox"]
[ext_resource type="PackedScene" uid="uid://cju206cf1ni5m" path="res://logic/scenes/tools/mop.tscn" id="3_atr1m"]

[sub_resource type="GDScript" id="GDScript_cx7sy"]
resource_name = "pj"
script/source = "extends CharacterBody3D
var direction : Vector3
var gravity := 10

enum playerStates {
	Free,
	Trapped,
	OnMainMenu
}
var currState : int:
	set(v):
		if v == playerStates.Trapped:
			$Camera3D.lock_camera(center_of_gravity)
			currState = v
		elif v == playerStates.Free:
			$Camera3D.free_camera()
			currState = v

@onready var camara_ref : InteraccionesJugador = $Camera3D

# trapped state variable
var center_of_gravity : Vector3

func get_camera_ref() -> Camera3D:
	return camara_ref

func _ready() -> void:
	currState = playerStates.Free
	#GlobalInfo.jugador_atrapado.connect(func(p): set_center_of_gravity(p))
	

func _physics_process(_delta: float) -> void:
	direction = camara_ref.get_global_transform().basis.z
	match currState:
		playerStates.Free:
			free_pp(_delta)
		playerStates.Trapped:
			trapped_pp(_delta)
		playerStates.OnMainMenu:
			on_menu_pp(_delta)
	
	
#region physics_process
func free_pp(_delta : float) -> void:
	var moveSpeed := Vector3.ZERO
	if (Input.is_action_pressed(\"MoveBackwards\")):
		moveSpeed += direction
	if (Input.is_action_pressed(\"MoveForwards\")):
		moveSpeed -= direction
	if (Input.is_action_pressed(\"MoveL\")):
		moveSpeed += direction.cross($\".\".up_direction)
	if (Input.is_action_pressed(\"MoveR\")):
		moveSpeed += $\".\".up_direction.cross(direction)	
	velocity = moveSpeed.normalized() * 10
	velocity.y -= gravity
	move_and_slide()
	
func trapped_pp(_delta: float) -> void:
	var moveSpeed := Vector3.ZERO
	if (Input.is_action_pressed(\"MoveBackwards\")):
		moveSpeed += direction
	if (Input.is_action_pressed(\"MoveForwards\")):
		moveSpeed -= direction
	if (Input.is_action_pressed(\"MoveL\")):
		moveSpeed += direction.cross($\".\".up_direction)
	if (Input.is_action_pressed(\"MoveR\")):
		moveSpeed += $\".\".up_direction.cross(direction)
	velocity = ((moveSpeed.normalized() * 1.1) -direction.normalized()) * 5 
	velocity.y -= gravity
	move_and_slide()
	
func on_menu_pp(_delta: float) -> void:
	pass
#endregion

func set_center_of_gravity(p : Vector3) -> void:
	center_of_gravity = p
	currState = playerStates.Trapped
	
	
func reset_player_movement_freedom() -> void:
	currState = playerStates.Free
"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_pnppo"]

[sub_resource type="CapsuleMesh" id="CapsuleMesh_xqvju"]

[node name="Jugador" type="CharacterBody3D" groups=["Jugador"]]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.10292, 0)
collision_mask = 5
script = SubResource("GDScript_cx7sy")

[node name="Camera3D" type="Camera3D" parent="." node_paths=PackedStringArray("mop_reference")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
script = ExtResource("1_jh4ox")
mop_reference = NodePath("../mop")

[node name="RayCast3D" type="RayCast3D" parent="Camera3D"]
target_position = Vector3(0.21, 0, -3)
hit_from_inside = true
collide_with_areas = true
debug_shape_custom_color = Color(0.537255, 0.443137, 0.164706, 0)

[node name="RemoteTransform3D_mop" type="RemoteTransform3D" parent="Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.03452, -0.234879, -1.34491)
remote_path = NodePath("../../mop")
update_rotation = false
update_scale = false

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(0.999999, -0.00134197, 0.000845586, 0.00134066, 0.999998, 0.00154888, -0.000847652, -0.00154775, 0.999998, 0, 0, 0)
shape = SubResource("CapsuleShape3D_pnppo")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
visible = false
mesh = SubResource("CapsuleMesh_xqvju")

[node name="mop" parent="." node_paths=PackedStringArray("remote_transform_ref", "camera_ref") instance=ExtResource("3_atr1m")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 1.03452, 0.765121, -1.34491)
remote_transform_ref = NodePath("../Camera3D/RemoteTransform3D_mop")
camera_ref = NodePath("../Camera3D")
